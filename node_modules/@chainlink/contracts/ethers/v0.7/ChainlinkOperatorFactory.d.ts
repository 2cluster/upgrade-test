/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface ChainlinkOperatorFactoryInterface extends Interface {
  functions: {
    link: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    OperatorCreated: TypedEventDescription<{
      encodeTopics([operator, owner]: [string | null, string | null]): string[];
    }>;
  };
}

export class ChainlinkOperatorFactory extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): ChainlinkOperatorFactory;
  attach(addressOrName: string): ChainlinkOperatorFactory;
  deployed(): Promise<ChainlinkOperatorFactory>;

  on(event: EventFilter | string, listener: Listener): ChainlinkOperatorFactory;
  once(
    event: EventFilter | string,
    listener: Listener
  ): ChainlinkOperatorFactory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ChainlinkOperatorFactory;
  removeAllListeners(eventName: EventFilter | string): ChainlinkOperatorFactory;
  removeListener(eventName: any, listener: Listener): ChainlinkOperatorFactory;

  interface: ChainlinkOperatorFactoryInterface;

  functions: {
    link(overrides?: TransactionOverrides): Promise<string>;

    "link()"(overrides?: TransactionOverrides): Promise<string>;
  };

  link(overrides?: TransactionOverrides): Promise<string>;

  "link()"(overrides?: TransactionOverrides): Promise<string>;

  filters: {
    OperatorCreated(operator: string | null, owner: string | null): EventFilter;
  };

  estimate: {
    link(overrides?: TransactionOverrides): Promise<BigNumber>;

    "link()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };
}
