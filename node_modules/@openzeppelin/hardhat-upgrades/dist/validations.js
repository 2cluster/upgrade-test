"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readValidations = exports.writeValidations = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
async function writeValidations(hre, _validations) {
    let validations = [_validations];
    try {
        const previousValidations = JSON.parse(await fs_1.promises.readFile(getValidationsCachePath(hre), 'utf8'));
        if (previousValidations !== undefined) {
            validations = validations.concat(previousValidations);
        }
    }
    catch (e) {
        if (e.code !== 'ENOENT') {
            throw e;
        }
    }
    await fs_1.promises.mkdir(hre.config.paths.cache, { recursive: true });
    await fs_1.promises.writeFile(getValidationsCachePath(hre), JSON.stringify(validations, null, 2));
}
exports.writeValidations = writeValidations;
async function readValidations(hre) {
    try {
        return JSON.parse(await fs_1.promises.readFile(getValidationsCachePath(hre), 'utf8'));
    }
    catch (e) {
        if (e.code === 'ENOENT') {
            throw new Error('Validations log not found. Recompile with `hardhat compile --force`');
        }
        else {
            throw e;
        }
    }
}
exports.readValidations = readValidations;
function getValidationsCachePath(hre) {
    return path_1.default.join(hre.config.paths.cache, 'validations.json');
}
//# sourceMappingURL=validations.js.map